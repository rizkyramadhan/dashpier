{"version":3,"file":"bundles/npm.react-native-web.cfccdbea9f8130a7dcaf.min.js","sources":["webpack:////media/riz/data/Projects/dashpier/node_modules/react-native-web/dist/modules/createStrictShapeTypeChecker/index.js"],"sourcesContent":["function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\n\nfunction createStrictShapeTypeChecker(shapeTypes) {\n  function checkType(isRequired, props, propName, componentName, location) {\n    if (!props[propName]) {\n      if (isRequired) {\n        invariant(false, \"Required object `\" + propName + \"` was not specified in `\" + componentName + \"`.\");\n      }\n\n      return;\n    }\n\n    var propValue = props[propName];\n    var propType = typeof propValue;\n    var locationName = location || '(unknown)';\n\n    if (propType !== 'object') {\n      invariant(false, \"Invalid \" + locationName + \" `\" + propName + \"` of type `\" + propType + \"` \" + (\"supplied to `\" + componentName + \"`, expected `object`.\"));\n    } // We need to check all keys in case some are required but missing from\n    // props.\n\n\n    var allKeys = _objectSpread({}, props[propName], shapeTypes);\n\n    for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {\n      rest[_key - 5] = arguments[_key];\n    }\n\n    for (var _key2 in allKeys) {\n      var checker = shapeTypes[_key2];\n\n      if (!checker) {\n        invariant(false, \"Invalid props.\" + propName + \" key `\" + _key2 + \"` supplied to `\" + componentName + \"`.\" + '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));\n      }\n\n      var error = checker.apply(void 0, [propValue, _key2, componentName, location].concat(rest));\n\n      if (error) {\n        invariant(false, error.message + '\\nBad object: ' + JSON.stringify(props[propName], null, '  '));\n      }\n    }\n  }\n\n  function chainedCheckType(props, propName, componentName, location) {\n    for (var _len2 = arguments.length, rest = new Array(_len2 > 4 ? _len2 - 4 : 0), _key3 = 4; _key3 < _len2; _key3++) {\n      rest[_key3 - 4] = arguments[_key3];\n    }\n\n    return checkType.apply(void 0, [false, props, propName, componentName, location].concat(rest));\n  }\n\n  chainedCheckType.isRequired = checkType.bind(null, true);\n  return chainedCheckType;\n}\n\nexport default createStrictShapeTypeChecker;"],"mappings":"AAAA","sourceRoot":""}