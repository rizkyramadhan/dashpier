{"version":3,"file":"bundles/npm.react-navigation-stack.2366f72e6c570c3df8e9.min.js","sources":["webpack:///createPointerEventsContainer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View } from 'react-native';\nimport { NavigationProp, Scene } from '../../types';\n\nconst MIN_POSITION_OFFSET = 0.01;\n\nexport type PointerEvents = 'box-only' | 'none' | 'auto';\n\nexport type InputProps = {\n  scene: Scene;\n  navigation: NavigationProp;\n  realPosition: Animated.Value;\n};\n\nexport type InjectedProps = {\n  pointerEvents: PointerEvents;\n  onComponentRef: (ref: View | null) => void;\n};\n\n/**\n * Create a higher-order component that automatically computes the\n * `pointerEvents` property for a component whenever navigation position\n * changes.\n */\nexport default function createPointerEventsContainer<\n  Props extends InjectedProps & InputProps\n>(\n  Component: React.ComponentType<Props>\n): React.ComponentType<Pick<Props, Exclude<keyof Props, keyof InjectedProps>>> {\n  class Container extends React.Component<Props> {\n    private pointerEvents = this.computePointerEvents();\n    private component: View | null = null;\n    private positionListener: AnimatedValueSubscription | undefined;\n\n    componentWillUnmount() {\n      this.positionListener && this.positionListener.remove();\n    }\n\n    private handleComponentRef = (component: View | null) => {\n      this.component = component;\n\n      if (component && typeof component.setNativeProps !== 'function') {\n        throw new Error('Component must implement method `setNativeProps`');\n      }\n    };\n\n    private bindPosition() {\n      this.positionListener && this.positionListener.remove();\n      this.positionListener = new AnimatedValueSubscription(\n        this.props.realPosition,\n        this.handlePositionChange\n      );\n    }\n\n    private handlePositionChange = (/* { value } */) => {\n      // This should log each frame when releasing the gesture or when pressing\n      // the back button! If not, something has gone wrong with the animated\n      // value subscription\n      // console.log(value);\n\n      if (this.component) {\n        const pointerEvents = this.computePointerEvents();\n        if (this.pointerEvents !== pointerEvents) {\n          this.pointerEvents = pointerEvents;\n          this.component.setNativeProps({ pointerEvents });\n        }\n      }\n    };\n\n    private computePointerEvents() {\n      const { navigation, realPosition, scene } = this.props;\n\n      if (scene.isStale || navigation.state.index !== scene.index) {\n        // The scene isn't focused.\n        return scene.index > navigation.state.index ? 'box-only' : 'none';\n      }\n\n      // @ts-ignore\n      const offset = realPosition.__getAnimatedValue() - navigation.state.index;\n      if (Math.abs(offset) > MIN_POSITION_OFFSET) {\n        // The positon is still away from scene's index.\n        // Scene's children should not receive touches until the position\n        // is close enough to scene's index.\n        return 'box-only';\n      }\n\n      return 'auto';\n    }\n\n    render() {\n      this.bindPosition();\n      this.pointerEvents = this.computePointerEvents();\n\n      return (\n        <Component\n          {...this.props}\n          pointerEvents={this.pointerEvents}\n          onComponentRef={this.handleComponentRef}\n        />\n      );\n    }\n  }\n\n  return Container as any;\n}\n\nclass AnimatedValueSubscription {\n  private value: Animated.Value;\n  private token: string;\n\n  constructor(value: Animated.Value, callback: Animated.ValueListenerCallback) {\n    this.value = value;\n    this.token = value.addListener(callback);\n  }\n\n  remove() {\n    this.value.removeListener(this.token);\n  }\n}\n"],"mappings":"AAIA","sourceRoot":""}