{"version":3,"file":"static/js/npm.react-navigation.chunk.js","sources":["/media/riz/data/Projects/dashpier/StackActions.js","/media/riz/data/Projects/dashpier/SwitchView.js","/media/riz/data/Projects/dashpier/SceneView.js","/media/riz/data/Projects/dashpier/node_modules/@react-navigation/native/dist/createNavigationAwareScrollable.js","/media/riz/data/Projects/dashpier/SwitchActions.ts","/media/riz/data/Projects/dashpier/node_modules/@react-navigation/native/dist/withOrientation.js","/media/riz/data/Projects/dashpier/node_modules/@react-navigation/core/node_modules/isarray/index.js","/media/riz/data/Projects/dashpier/withDefaultValue.js","/media/riz/data/Projects/dashpier/node_modules/@react-navigation/native/dist/utils/invariant.js","/media/riz/data/Projects/dashpier/node_modules/@react-navigation/native/dist/Scrollables.js","/media/riz/data/Projects/dashpier/getActiveChildNavigationOptions.js","/media/riz/data/Projects/dashpier/node_modules/@react-navigation/core/node_modules/path-to-regexp/index.js","/media/riz/data/Projects/dashpier/getScreenForRouteName.js","/media/riz/data/Projects/dashpier/invariant.js","/media/riz/data/Projects/dashpier/createSwitchNavigator.js","/media/riz/data/Projects/dashpier/node_modules/@react-navigation/native/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js","/media/riz/data/Projects/dashpier/node_modules/react-navigation/src/react-navigation.js","/media/riz/data/Projects/dashpier/node_modules/@react-navigation/native/dist/index.js","/media/riz/data/Projects/dashpier/validateRouteConfigMap.js","/media/riz/data/Projects/dashpier/index.js","/media/riz/data/Projects/dashpier/pathUtils.js","/media/riz/data/Projects/dashpier/node_modules/@react-navigation/native/dist/createKeyboardAwareNavigator.js","/media/riz/data/Projects/dashpier/StateUtils.js","/media/riz/data/Projects/dashpier/KeyGenerator.ts","/media/riz/data/Projects/dashpier/SwitchRouter.js","/media/riz/data/Projects/dashpier/node_modules/@react-navigation/native/dist/createAppContainer.js","/media/riz/data/Projects/dashpier/NavigationEvents.js","/media/riz/data/Projects/dashpier/withNavigation.js","/media/riz/data/Projects/dashpier/NavigationActions.js","/media/riz/data/Projects/dashpier/node_modules/@react-navigation/core/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js","/media/riz/data/Projects/dashpier/node_modules/@react-navigation/native/dist/utils/docsUrl.js","/media/riz/data/Projects/dashpier/NavigationContext.js","/media/riz/data/Projects/dashpier/getNavigationActionCreators.js","/media/riz/data/Projects/dashpier/withNavigationFocus.js","/media/riz/data/Projects/dashpier/node_modules/@react-navigation/native/dist/ResourceSavingSceneView.js","/media/riz/data/Projects/dashpier/createNavigator.js","/media/riz/data/Projects/dashpier/validateScreenOptions.js"],"sourcesContent":["export const POP = 'Navigation/POP';\nexport const POP_TO_TOP = 'Navigation/POP_TO_TOP';\nexport const PUSH = 'Navigation/PUSH';\nexport const RESET = 'Navigation/RESET';\nexport const REPLACE = 'Navigation/REPLACE';\nexport const COMPLETE_TRANSITION = 'Navigation/COMPLETE_TRANSITION';\n\nexport const pop = payload => ({\n  type: POP,\n  ...payload,\n});\n\nexport const popToTop = payload => ({\n  type: POP_TO_TOP,\n  ...payload,\n});\n\nexport const push = payload => ({\n  type: PUSH,\n  ...payload,\n});\n\nexport const reset = payload => ({\n  type: RESET,\n  key: null,\n  ...payload,\n});\n\nexport const replace = payload => ({\n  type: REPLACE,\n  ...payload,\n});\n\nexport const completeTransition = payload => ({\n  type: COMPLETE_TRANSITION,\n  preserveFocus: true,\n  ...payload,\n});\n","import React from 'react';\nimport SceneView from '../SceneView';\n\nexport default class SwitchView extends React.Component {\n  render() {\n    const { state } = this.props.navigation;\n    const activeKey = state.routes[state.index].key;\n    const descriptor = this.props.descriptors[activeKey];\n    const ChildComponent = descriptor.getComponent();\n\n    return (\n      <SceneView\n        component={ChildComponent}\n        navigation={descriptor.navigation}\n        screenProps={this.props.screenProps}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport NavigationContext from './NavigationContext';\n\nexport default class SceneView extends React.PureComponent {\n  render() {\n    const { screenProps, component: Component, navigation } = this.props;\n    return (\n      <NavigationContext.Provider value={navigation}>\n        <Component screenProps={screenProps} navigation={navigation} />\n      </NavigationContext.Provider>\n    );\n  }\n}\n","import React from 'react';\nimport hoistStatics from 'hoist-non-react-statics';\nimport { withNavigation } from '@react-navigation/core';\n\nexport default function createNavigationAwareScrollable(Component) {\n  const ComponentWithNavigationScrolling = withNavigation(class extends React.PureComponent {\n    static displayName = `withNavigationScrolling(${Component.displayName || Component.name})`;\n\n    componentDidMount() {\n      this._subscription = this.props.navigation.addListener('refocus', () => {\n        const scrollableNode = this.getNode();\n        if (this.props.navigation.isFocused() && scrollableNode !== null) {\n          if (scrollableNode.scrollToTop != null) {\n            scrollableNode.scrollToTop();\n          } else if (scrollableNode.scrollTo != null) {\n            scrollableNode.scrollTo({ y: 0 });\n          } else if (scrollableNode.scrollResponderScrollTo != null) {\n            scrollableNode.scrollResponderScrollTo({ y: 0 });\n          }\n        }\n      });\n    }\n\n    getNode() {\n      if (this._scrollRef === null) {\n        return null;\n      }\n\n      if (this._scrollRef.getScrollResponder) {\n        return this._scrollRef.getScrollResponder();\n      } else if (this._scrollRef.getNode) {\n        return this._scrollRef.getNode();\n      } else {\n        return this._scrollRef;\n      }\n    }\n\n    componentWillUnmount() {\n      if (this._subscription != null) {\n        this._subscription.remove();\n      }\n    }\n\n    render() {\n      return <Component ref={view => {\n        this._scrollRef = view;\n      }} {...this.props} />;\n    }\n  });\n\n  class NavigationAwareScrollable extends React.PureComponent {\n    static displayName = `NavigationAwareScrollable(${Component.displayName || Component.name})`;\n\n    _captureRef = view => {\n      this._innerRef = view;\n      this.props.onRef && this.props.onRef(view);\n    };\n\n    setNativeProps = (...args) => {\n      return this._innerRef.getNode().setNativeProps(...args);\n    };\n\n    getScrollResponder = (...args) => {\n      return this._innerRef.getNode().getScrollResponder(...args);\n    };\n\n    getScrollableNode = (...args) => {\n      return this._innerRef.getNode().getScrollableNode(...args);\n    };\n\n    getInnerViewNode = (...args) => {\n      return this._innerRef.getNode().getInnerViewNode(...args);\n    };\n\n    scrollTo = (...args) => {\n      return this._innerRef.getNode().scrollTo(...args);\n    };\n\n    scrollToEnd = (...args) => {\n      return this._innerRef.getNode().scrollToEnd(...args);\n    };\n\n    scrollWithoutAnimationTo = (...args) => {\n      return this._innerRef.getNode().scrollWithoutAnimationTo(...args);\n    };\n\n    flashScrollIndicators = (...args) => {\n      return this._innerRef.getNode().flashScrollIndicators(...args);\n    };\n\n    render() {\n      return <ComponentWithNavigationScrolling {...this.props} onRef={this._captureRef} />;\n    }\n  }\n\n  return hoistStatics(NavigationAwareScrollable, Component);\n}","export const JUMP_TO = 'Navigation/JUMP_TO';\n\nexport const jumpTo = (payload: {\n  routeName: string;\n  key: string;\n  params?: object;\n}) => ({\n  type: JUMP_TO,\n  preserveFocus: true,\n  ...payload,\n});\n","import React from 'react';\nimport { Dimensions } from 'react-native';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\nexport const isOrientationLandscape = ({ width, height }) => width > height;\n\nexport default function (WrappedComponent) {\n  class withOrientation extends React.Component {\n    constructor() {\n      super();\n\n      const isLandscape = isOrientationLandscape(Dimensions.get('window'));\n      this.state = { isLandscape };\n    }\n\n    componentDidMount() {\n      Dimensions.addEventListener('change', this.handleOrientationChange);\n    }\n\n    componentWillUnmount() {\n      Dimensions.removeEventListener('change', this.handleOrientationChange);\n    }\n\n    handleOrientationChange = ({ window }) => {\n      const isLandscape = isOrientationLandscape(window);\n      this.setState({ isLandscape });\n    };\n\n    render() {\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  return hoistNonReactStatic(withOrientation, WrappedComponent);\n}","module.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n","export default (obj, key, defaultValue) => {\n  if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {\n    return obj;\n  }\n\n  obj[key] = defaultValue;\n  return obj;\n};\n","/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function () {};\n\nif (__DEV__) {\n  validateFormat = function (format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\n// eslint-disable-next-line import/no-commonjs\nmodule.exports = invariant;","import React from 'react';\nimport { ScrollView, Platform, FlatList, SectionList, RefreshControl } from 'react-native';\nimport { ScrollView as GHScrollView } from 'react-native-gesture-handler';\nimport createNavigationAwareScrollable from './createNavigationAwareScrollable';\nimport invariant from './utils/invariant';\n\nlet WrappedScrollView;\nif (Platform.OS === 'android') {\n  // @todo: use GHScrollView again when\n  // https://github.com/kmagiera/react-native-gesture-handler/issues/560 has\n  // been fixed.\n  WrappedScrollView = createNavigationAwareScrollable(ScrollView);\n} else {\n  WrappedScrollView = createNavigationAwareScrollable(GHScrollView);\n}\n\nfunction propsMaybeWithRefreshControl(props) {\n  const onRefresh = props.onRefresh;\n  if (onRefresh) {\n    invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing) + '`');\n    return {\n      ...props,\n      refreshControl: props.refreshControl == null ? <RefreshControl refreshing={props.refreshing} onRefresh={onRefresh} progressViewOffset={props.progressViewOffset} /> : props.refreshControl\n    };\n  } else {\n    return props;\n  }\n}\n\nconst WrappedFlatList = React.forwardRef((props, ref) => <FlatList ref={ref} {...props} renderScrollComponent={props => <WrappedScrollView {...propsMaybeWithRefreshControl(props)} />} />);\n\nconst WrappedSectionList = React.forwardRef((props, ref) => <SectionList ref={ref} {...props} renderScrollComponent={props => <WrappedScrollView {...propsMaybeWithRefreshControl(props)} />} />);\n\n// eslint-disable-next-line import/no-commonjs\nmodule.exports = {\n  ScrollView: WrappedScrollView,\n  FlatList: WrappedFlatList,\n  SectionList: WrappedSectionList\n};","const getActiveChildNavigationOptions = (navigation, screenProps) => {\n  const { state, router, getChildNavigation } = navigation;\n  const activeRoute = state.routes[state.index];\n  const activeNavigation = getChildNavigation(activeRoute.key);\n  const options = router.getScreenOptions(activeNavigation, screenProps);\n  return options;\n};\n\nexport default getActiveChildNavigationOptions;\n","var isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n","import { isValidElementType } from 'react-is';\n\nimport invariant from '../utils/invariant';\n\n/**\n * Simple helper that gets a single screen (React component or navigator)\n * out of the navigator config.\n */\nexport default function getScreenForRouteName(routeConfigs, routeName) {\n  const routeConfig = routeConfigs[routeName];\n\n  if (!routeConfig) {\n    throw new Error(\n      `There is no route defined for key ${routeName}.\\n` +\n        `Must be one of: ${Object.keys(routeConfigs)\n          .map(a => `'${a}'`)\n          .join(',')}`\n    );\n  }\n\n  if (routeConfig.screen) {\n    return routeConfig.screen;\n  }\n\n  if (typeof routeConfig.getScreen === 'function') {\n    const screen = routeConfig.getScreen();\n    invariant(\n      isValidElementType(screen),\n      `The getScreen defined for route '${routeName} didn't return a valid ` +\n        'screen or navigator.\\n\\n' +\n        'Please pass it like this:\\n' +\n        `${routeName}: {\\n  getScreen: () => require('./MyScreen').default\\n}`\n    );\n    return screen;\n  }\n\n  return routeConfig;\n}\n","/* eslint-disable import/no-commonjs */\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function() {};\n\nif (process.env !== 'production') {\n  validateFormat = function(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;\n","import createNavigator from '../navigators/createNavigator';\nimport SwitchRouter from '../routers/SwitchRouter';\nimport SwitchView from '../views/SwitchView/SwitchView';\n\nfunction createSwitchNavigator(routeConfigMap, switchConfig = {}) {\n  const router = SwitchRouter(routeConfigMap, switchConfig);\n  const Navigator = createNavigator(SwitchView, router, switchConfig);\n  return Navigator;\n}\n\nexport default createSwitchNavigator;\n","'use strict';\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar ReactIs = require('react-is');\nvar REACT_STATICS = {\n    childContextTypes: true,\n    contextType: true,\n    contextTypes: true,\n    defaultProps: true,\n    displayName: true,\n    getDefaultProps: true,\n    getDerivedStateFromError: true,\n    getDerivedStateFromProps: true,\n    mixins: true,\n    propTypes: true,\n    type: true\n};\n\nvar KNOWN_STATICS = {\n    name: true,\n    length: true,\n    prototype: true,\n    caller: true,\n    callee: true,\n    arguments: true,\n    arity: true\n};\n\nvar FORWARD_REF_STATICS = {\n    '$$typeof': true,\n    render: true,\n    defaultProps: true,\n    displayName: true,\n    propTypes: true\n};\n\nvar MEMO_STATICS = {\n    '$$typeof': true,\n    compare: true,\n    defaultProps: true,\n    displayName: true,\n    propTypes: true,\n    type: true\n};\n\nvar TYPE_STATICS = {};\nTYPE_STATICS[ReactIs.ForwardRef] = FORWARD_REF_STATICS;\n\nfunction getStatics(component) {\n    if (ReactIs.isMemo(component)) {\n        return MEMO_STATICS;\n    }\n    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\n\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n    if (typeof sourceComponent !== 'string') {\n        // don't hoist over string (html) components\n\n        if (objectPrototype) {\n            var inheritedComponent = getPrototypeOf(sourceComponent);\n            if (inheritedComponent && inheritedComponent !== objectPrototype) {\n                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n            }\n        }\n\n        var keys = getOwnPropertyNames(sourceComponent);\n\n        if (getOwnPropertySymbols) {\n            keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n        }\n\n        var targetStatics = getStatics(targetComponent);\n        var sourceStatics = getStatics(sourceComponent);\n\n        for (var i = 0; i < keys.length; ++i) {\n            var key = keys[i];\n            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n                try {\n                    // Avoid failures from read-only properties\n                    defineProperty(targetComponent, key, descriptor);\n                } catch (e) {}\n            }\n        }\n\n        return targetComponent;\n    }\n\n    return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n","/* eslint global-require: 0 */\n\nmodule.exports = {\n  // Native\n  get createAppContainer() {\n    return require('@react-navigation/native').createAppContainer;\n  },\n  get createNavigationContainer() {\n    console.warn(\n      '`createNavigationContainer()` has been deprecated, please use `createAppContainer()` instead. You can also import createAppContainer directly from @react-navigation/native'\n    );\n    return require('@react-navigation/native').createAppContainer;\n  },\n  get createKeyboardAwareNavigator() {\n    return require('@react-navigation/native').createKeyboardAwareNavigator;\n  },\n  get createNavigationAwareScrollable() {\n    return require('@react-navigation/native').createNavigationAwareScrollable;\n  },\n  get ScrollView() {\n    return require('@react-navigation/native').ScrollView;\n  },\n  get FlatList() {\n    return require('@react-navigation/native').FlatList;\n  },\n  get SectionList() {\n    return require('@react-navigation/native').SectionList;\n  },\n  get ResourceSavingSceneView() {\n    return require('@react-navigation/native').ResourceSavingSceneView;\n  },\n  get SafeAreaView() {\n    return require('@react-navigation/native').SafeAreaView;\n  },\n  get withOrientation() {\n    return require('@react-navigation/native').withOrientation;\n  },\n\n  // Core\n  get createNavigator() {\n    return require('@react-navigation/core').createNavigator;\n  },\n  get StateUtils() {\n    return require('@react-navigation/core').StateUtils;\n  },\n  get getNavigation() {\n    return require('@react-navigation/core').getNavigation;\n  },\n  get NavigationContext() {\n    return require('@react-navigation/core').NavigationContext;\n  },\n  get NavigationProvider() {\n    return require('@react-navigation/core').NavigationProvider;\n  },\n  get NavigationConsumer() {\n    return require('@react-navigation/core').NavigationConsumer;\n  },\n  get NavigationActions() {\n    return require('@react-navigation/core').NavigationActions;\n  },\n  get StackActions() {\n    return require('@react-navigation/core').StackActions;\n  },\n  get StackRouter() {\n    return require('@react-navigation/core').StackRouter;\n  },\n  get TabRouter() {\n    return require('@react-navigation/core').TabRouter;\n  },\n  get SwitchRouter() {\n    return require('@react-navigation/core').SwitchRouter;\n  },\n  get SwitchActions() {\n    return require('@react-navigation/core').SwitchActions;\n  },\n  get createConfigGetter() {\n    return require('@react-navigation/core').StackAcreateConfigGetterctions;\n  },\n  get getScreenForRouteName() {\n    return require('@react-navigation/core').getScreenForRouteName;\n  },\n  get validateRouteConfigMap() {\n    return require('@react-navigation/core').validateRouteConfigMap;\n  },\n  get getActiveChildNavigationOptions() {\n    return require('@react-navigation/core').getActiveChildNavigationOptions;\n  },\n  get pathUtils() {\n    return require('@react-navigation/core').pathUtils;\n  },\n  get SceneView() {\n    return require('@react-navigation/core').SceneView;\n  },\n  get SwitchView() {\n    return require('@react-navigation/core').SwitchView;\n  },\n  get NavigationEvents() {\n    return require('@react-navigation/core').NavigationEvents;\n  },\n  get withNavigation() {\n    return require('@react-navigation/core').withNavigation;\n  },\n  get withNavigationFocus() {\n    return require('@react-navigation/core').withNavigationFocus;\n  },\n\n  // Navigators\n\n  get createStackNavigator() {\n    return require('react-navigation-stack').createStackNavigator;\n  },\n  get createSwitchNavigator() {\n    return require('@react-navigation/core').createSwitchNavigator;\n  },\n\n  get createBottomTabNavigator() {\n    return require('react-navigation-tabs').createBottomTabNavigator;\n  },\n  get createMaterialTopTabNavigator() {\n    return require('react-navigation-tabs').createMaterialTopTabNavigator;\n  },\n\n  get createDrawerNavigator() {\n    return require('react-navigation-drawer').createDrawerNavigator;\n  },\n\n  // Gesture contexts\n\n  get StackGestureContext() {\n    return require('react-navigation-stack').StackGestureContext;\n  },\n  get DrawerGestureContext() {\n    return require('react-navigation-drawer').DrawerGestureContext;\n  },\n\n  // Routers and Actions\n\n  get DrawerRouter() {\n    return require('react-navigation-drawer').DrawerRouter;\n  },\n  get DrawerActions() {\n    return require('react-navigation-drawer').DrawerActions;\n  },\n\n  // Views\n  get Transitioner() {\n    console.warn(\n      'Importing the stack Transitioner directly from react-navigation is now deprecated. Instead, import { Transitioner } from \"react-navigation-stack\";'\n    );\n    return require('react-navigation-stack').Transitioner;\n  },\n  get StackView() {\n    return require('react-navigation-stack').StackView;\n  },\n  get StackViewCard() {\n    return require('react-navigation-stack').StackViewCard;\n  },\n  get StackViewTransitionConfigs() {\n    return require('react-navigation-stack').StackViewTransitionConfigs;\n  },\n\n  // Header\n  get Header() {\n    return require('react-navigation-stack').Header;\n  },\n  get HeaderTitle() {\n    return require('react-navigation-stack').HeaderTitle;\n  },\n  get HeaderBackButton() {\n    return require('react-navigation-stack').HeaderBackButton;\n  },\n  get HeaderStyleInterpolator() {\n    return require('react-navigation-stack').HeaderStyleInterpolator;\n  },\n\n  // DrawerView\n  get DrawerView() {\n    return require('react-navigation-drawer').DrawerView;\n  },\n  get DrawerItems() {\n    return require('react-navigation-drawer').DrawerNavigatorItems;\n  },\n  get DrawerSidebar() {\n    return require('react-navigation-drawer').DrawerSidebar;\n  },\n\n  // Tabs\n  get BottomTabBar() {\n    return require('react-navigation-tabs').BottomTabBar;\n  },\n  get MaterialTopTabBar() {\n    return require('react-navigation-tabs').MaterialTopTabBar;\n  },\n};\n","/* eslint-disable import/no-commonjs */\n\nmodule.exports = {\n  get createAppContainer() {\n    return require('./createAppContainer').default;\n  },\n\n  get createKeyboardAwareNavigator() {\n    return require('./createKeyboardAwareNavigator').default;\n  },\n\n  get createNavigationAwareScrollable() {\n    return require('./createNavigationAwareScrollable').default;\n  },\n\n  get withOrientation() {\n    return require('./withOrientation').default;\n  },\n\n  get ResourceSavingSceneView() {\n    return require('./ResourceSavingSceneView').default;\n  },\n\n  get SafeAreaView() {\n    return require('react-native-safe-area-view').default;\n  },\n\n  get ScrollView() {\n    return require('./Scrollables').ScrollView;\n  },\n\n  get FlatList() {\n    return require('./Scrollables').FlatList;\n  },\n\n  get SectionList() {\n    return require('./Scrollables').SectionList;\n  }\n};","import { isValidElementType } from 'react-is';\n\nimport invariant from '../utils/invariant';\n\n/**\n * Make sure the config passed e.g. to StackRouter, TabRouter has\n * the correct format, and throw a clear error if it doesn't.\n */\nfunction validateRouteConfigMap(routeConfigs) {\n  const routeNames = Object.keys(routeConfigs);\n  invariant(\n    routeNames.length > 0,\n    'Please specify at least one route when configuring a navigator.'\n  );\n\n  routeNames.forEach(routeName => {\n    const routeConfig = routeConfigs[routeName];\n    const screenComponent = getScreenComponent(routeConfig);\n\n    if (\n      !screenComponent ||\n      (!isValidElementType(screenComponent) && !routeConfig.getScreen)\n    ) {\n      throw new Error(`The component for route '${routeName}' must be a React component. For example:\n\nimport MyScreen from './MyScreen';\n...\n${routeName}: MyScreen,\n}\n\nYou can also use a navigator:\n\nimport MyNavigator from './MyNavigator';\n...\n${routeName}: MyNavigator,\n}`);\n    }\n\n    if (routeConfig.screen && routeConfig.getScreen) {\n      throw new Error(\n        `Route '${routeName}' should declare a screen or a getScreen, not both.`\n      );\n    }\n  });\n}\n\nfunction getScreenComponent(routeConfig) {\n  if (!routeConfig) {\n    return null;\n  }\n\n  return routeConfig.screen ? routeConfig.screen : routeConfig;\n}\n\nexport default validateRouteConfigMap;\n","/* eslint-disable import/no-commonjs */\n\nmodule.exports = {\n  get StateUtils() {\n    return require('./StateUtils').default;\n  },\n  get getNavigation() {\n    return require('./getNavigation').default;\n  },\n\n  // Navigators\n  get createNavigator() {\n    return require('./navigators/createNavigator').default;\n  },\n  get NavigationContext() {\n    return require('./views/NavigationContext').default;\n  },\n  get NavigationProvider() {\n    return require('./views/NavigationContext').default.Provider;\n  },\n  get NavigationConsumer() {\n    return require('./views/NavigationContext').default.Consumer;\n  },\n\n  get createSwitchNavigator() {\n    return require('./navigators/createSwitchNavigator').default;\n  },\n\n  // Actions\n  get NavigationActions() {\n    return require('./NavigationActions');\n  },\n  get StackActions() {\n    return require('./routers/StackActions');\n  },\n  get SwitchActions() {\n    return require('./routers/SwitchActions');\n  },\n\n  // Routers\n  get StackRouter() {\n    return require('./routers/StackRouter').default;\n  },\n  get TabRouter() {\n    return require('./routers/TabRouter').default;\n  },\n  get SwitchRouter() {\n    return require('./routers/SwitchRouter').default;\n  },\n\n  get createConfigGetter() {\n    return require('./routers/createConfigGetter').default;\n  },\n  get getScreenForRouteName() {\n    return require('./routers/getScreenForRouteName').default;\n  },\n  get validateRouteConfigMap() {\n    return require('./routers/validateRouteConfigMap').default;\n  },\n\n  // Utils\n  get getActiveChildNavigationOptions() {\n    return require('./utils/getActiveChildNavigationOptions').default;\n  },\n  get pathUtils() {\n    return require('./routers/pathUtils');\n  },\n\n  get SceneView() {\n    return require('./views/SceneView').default;\n  },\n\n  // SwitchView\n  get SwitchView() {\n    return require('./views/SwitchView/SwitchView').default;\n  },\n\n  // NavigationEvents\n  get NavigationEvents() {\n    return require('./views/NavigationEvents').default;\n  },\n\n  // HOCs\n  get withNavigation() {\n    return require('./views/withNavigation').default;\n  },\n  get withNavigationFocus() {\n    return require('./views/withNavigationFocus').default;\n  },\n};\n","/* eslint-disable import/no-commonjs */\n\nimport pathToRegexp, { compile } from 'path-to-regexp';\nimport * as NavigationActions from '../NavigationActions';\nimport invariant from '../utils/invariant';\n\nconst queryString = require('query-string');\n\nexport const getParamsFromPath = (inputParams, pathMatch, pathMatchKeys) => {\n  const params = pathMatch.slice(1).reduce(\n    // iterate over matched path params\n    (paramsOut, matchResult, i) => {\n      const key = pathMatchKeys[i];\n      if (!key || key.asterisk) {\n        return paramsOut;\n      }\n      const paramName = key.name;\n\n      let decodedMatchResult;\n      if (matchResult) {\n        try {\n          decodedMatchResult = decodeURIComponent(matchResult);\n        } catch (e) {\n          // ignore `URIError: malformed URI`\n        }\n      }\n\n      paramsOut[paramName] = decodedMatchResult || matchResult;\n      return paramsOut;\n    },\n    {\n      // start with the input(query string) params, which will get overridden by path params\n      ...inputParams,\n    }\n  );\n  return params;\n};\nconst getRestOfPath = (pathMatch, pathMatchKeys) => {\n  const rest = pathMatch[pathMatchKeys.findIndex(k => k.asterisk) + 1];\n  return rest;\n};\n\nexport const urlToPathAndParams = (url, uriPrefix) => {\n  const searchMatch = url.match(/^(.*)\\?(.*)$/);\n  const params = searchMatch ? queryString.parse(searchMatch[2]) : {};\n  const urlWithoutSearch = searchMatch ? searchMatch[1] : url;\n  const delimiter = uriPrefix || '://';\n  let path = urlWithoutSearch.split(delimiter)[1];\n  if (path === undefined) {\n    path = urlWithoutSearch;\n  }\n  if (path === '/') {\n    path = '';\n  }\n  if (path[path.length - 1] === '/') {\n    path = path.slice(0, -1);\n  }\n  return {\n    path,\n    params,\n  };\n};\n\nexport const createPathParser = (\n  childRouters,\n  routeConfigs,\n  { paths: pathConfigs = {}, disableRouteNamePaths }\n) => {\n  const pathsByRouteNames = {};\n  let paths = [];\n\n  // Build pathsByRouteNames, which includes a regex to match paths for each route. Keep in mind, the regex will pass for the route and all child routes. The code that uses pathsByRouteNames will need to also verify that the child router produces an action, in the case of isPathMatchable false (a null path).\n  Object.keys(childRouters).forEach(routeName => {\n    let pathPattern;\n\n    // First check for paths on the router, then check the route config\n    if (pathConfigs[routeName] !== undefined) {\n      pathPattern = pathConfigs[routeName];\n    } else {\n      pathPattern = routeConfigs[routeName].path;\n    }\n\n    if (pathPattern === undefined) {\n      // If the user hasn't specified a path at all nor disableRouteNamePaths, then we assume the routeName is an appropriate path\n      pathPattern = disableRouteNamePaths ? null : routeName;\n    }\n\n    invariant(\n      pathPattern === null || typeof pathPattern === 'string',\n      `Route path for ${routeName} must be specified as a string, or null.`\n    );\n\n    // the path may be specified as null, which is similar to empty string because it allows child routers to handle the action, but it will not match empty paths\n    const isPathMatchable = pathPattern !== null;\n    // pathPattern is a string with inline params, such as people/:id/*foo\n    const exactReKeys = [];\n    const exactRe = isPathMatchable\n      ? pathToRegexp(pathPattern, exactReKeys)\n      : null;\n    const extendedPathReKeys = [];\n    const isWildcard = pathPattern === '' || !isPathMatchable;\n    const extendedPathRe = pathToRegexp(\n      isWildcard ? '*' : `${pathPattern}/*`,\n      extendedPathReKeys\n    );\n\n    pathsByRouteNames[routeName] = {\n      exactRe,\n      exactReKeys,\n      extendedPathRe,\n      extendedPathReKeys,\n      isWildcard,\n      toPath: pathPattern === null ? () => '' : compile(pathPattern),\n    };\n  });\n\n  paths = Object.entries(pathsByRouteNames);\n\n  const getActionForPathAndParams = (pathToResolve = '', inputParams = {}) => {\n    // Attempt to match `pathToResolve` with a route in this router's routeConfigs, deferring to child routers\n\n    for (const [routeName, path] of paths) {\n      const { exactRe, exactReKeys, extendedPathRe, extendedPathReKeys } = path;\n      const childRouter = childRouters[routeName];\n\n      const exactMatch = exactRe && exactRe.exec(pathToResolve);\n\n      if (exactMatch && exactMatch.length) {\n        const extendedMatch =\n          extendedPathRe && extendedPathRe.exec(pathToResolve);\n        let childAction = null;\n        if (extendedMatch && childRouter) {\n          const restOfPath = getRestOfPath(extendedMatch, extendedPathReKeys);\n          childAction = childRouter.getActionForPathAndParams(\n            restOfPath,\n            inputParams\n          );\n        }\n\n        return NavigationActions.navigate({\n          routeName,\n          params: getParamsFromPath(inputParams, exactMatch, exactReKeys),\n          action: childAction,\n        });\n      }\n    }\n\n    for (const [routeName, path] of paths) {\n      const { extendedPathRe, extendedPathReKeys } = path;\n      const childRouter = childRouters[routeName];\n\n      const extendedMatch =\n        extendedPathRe && extendedPathRe.exec(pathToResolve);\n\n      if (extendedMatch && extendedMatch.length) {\n        const restOfPath = getRestOfPath(extendedMatch, extendedPathReKeys);\n        let childAction = null;\n        if (childRouter) {\n          childAction = childRouter.getActionForPathAndParams(\n            restOfPath,\n            inputParams\n          );\n        }\n        if (!childAction) {\n          continue;\n        }\n        return NavigationActions.navigate({\n          routeName,\n          params: getParamsFromPath(\n            inputParams,\n            extendedMatch,\n            extendedPathReKeys\n          ),\n          action: childAction,\n        });\n      }\n    }\n\n    return null;\n  };\n  const getPathAndParamsForRoute = route => {\n    const { routeName, params } = route;\n    const childRouter = childRouters[routeName];\n    const { toPath, exactReKeys } = pathsByRouteNames[routeName];\n    const subPath = toPath(params);\n    const nonPathParams = {};\n    if (params) {\n      Object.keys(params)\n        .filter(paramName => !exactReKeys.find(k => k.name === paramName))\n        .forEach(paramName => {\n          nonPathParams[paramName] = params[paramName];\n        });\n    }\n    if (childRouter) {\n      // If it has a router it's a navigator.\n      // If it doesn't have router it's an ordinary React component.\n      const child = childRouter.getPathAndParamsForState(route);\n      return {\n        path: subPath ? `${subPath}/${child.path}` : child.path,\n        params: child.params\n          ? { ...nonPathParams, ...child.params }\n          : nonPathParams,\n      };\n    }\n    return {\n      path: subPath,\n      params: nonPathParams,\n    };\n  };\n  return { getActionForPathAndParams, getPathAndParamsForRoute };\n};\n","import React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default ((Navigator, navigatorConfig) => class KeyboardAwareNavigator extends React.Component {\n  static router = Navigator.router;\n  static navigationOptions = Navigator.navigationOptions;\n  _previouslyFocusedTextInput = null;\n\n  render() {\n    return <Navigator {...this.props} onGestureBegin={this._handleGestureBegin} onGestureCanceled={this._handleGestureCanceled} onGestureEnd={this._handleGestureEnd} onTransitionStart={this._handleTransitionStart} />;\n  }\n\n  _handleGestureBegin = () => {\n    this._previouslyFocusedTextInput = TextInput.State.currentlyFocusedField();\n    if (this._previouslyFocusedTextInput) {\n      TextInput.State.blurTextInput(this._previouslyFocusedTextInput);\n    }\n    this.props.onGestureBegin && this.props.onGestureBegin();\n  };\n\n  _handleGestureCanceled = () => {\n    if (this._previouslyFocusedTextInput) {\n      TextInput.State.focusTextInput(this._previouslyFocusedTextInput);\n    }\n    this.props.onGestureCanceled && this.props.onGestureCanceled();\n  };\n\n  _handleGestureEnd = () => {\n    this._previouslyFocusedTextInput = null;\n    this.props.onGestureFinish && this.props.onGestureFinish();\n  };\n\n  _handleTransitionStart = (transitionProps, prevTransitionProps) => {\n    // TODO: We should not even have received the transition start event\n    // in the case where the index did not change, I believe. We\n    // should revisit this after 2.0 release.\n    if (transitionProps.index !== prevTransitionProps.index) {\n      const currentField = TextInput.State.currentlyFocusedField();\n      if (currentField) {\n        TextInput.State.blurTextInput(currentField);\n      }\n    }\n\n    const onTransitionStart = this.props.onTransitionStart || navigatorConfig.onTransitionStart;\n    onTransitionStart && onTransitionStart(transitionProps, prevTransitionProps);\n  };\n});","import invariant from './utils/invariant';\n\n/**\n * Utilities to perform atomic operation with navigate state and routes.\n *\n * ```javascript\n * const state1 = {key: 'screen 1'};\n * const state2 = NavigationStateUtils.push(state1, {key: 'screen 2'});\n * ```\n */\nconst StateUtils = {\n  /**\n   * Gets a route by key. If the route isn't found, returns `null`.\n   */\n  get(state, key) {\n    return state.routes.find(route => route.key === key) || null;\n  },\n\n  /**\n   * Returns the first index at which a given route's key can be found in the\n   * routes of the navigation state, or -1 if it is not present.\n   */\n  indexOf(state, key) {\n    return state.routes.findIndex(route => route.key === key);\n  },\n\n  /**\n   * Returns `true` at which a given route's key can be found in the\n   * routes of the navigation state.\n   */\n  has(state, key) {\n    return !!state.routes.some(route => route.key === key);\n  },\n\n  /**\n   * Pushes a new route into the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  push(state, route) {\n    invariant(\n      StateUtils.indexOf(state, route.key) === -1,\n      'should not push route with duplicated key %s',\n      route.key\n    );\n\n    const routes = state.routes.slice();\n    routes.push(route);\n\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Pops out a route from the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  pop(state) {\n    if (state.index <= 0) {\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\n      return state;\n    }\n    const routes = state.routes.slice(0, -1);\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by index.\n   */\n  jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n\n    return {\n      ...state,\n      index,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by key.\n   */\n  jumpTo(state, key) {\n    const index = StateUtils.indexOf(state, key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n\n  /**\n   * Sets the focused route to the previous route.\n   */\n  back(state) {\n    const index = state.index - 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Sets the focused route to the next route.\n   */\n  forward(state) {\n    const index = state.index + 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at and updates the routes array accordingly.\n   */\n  replaceAndPrune(state, key, route) {\n    const index = StateUtils.indexOf(state, key);\n    const replaced = StateUtils.replaceAtIndex(state, index, route);\n\n    return {\n      ...replaced,\n      routes: replaced.routes.slice(0, index + 1),\n    };\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at. Does not prune the routes.\n   * If preserveIndex is true then replacing the route does not cause the index\n   * to change to the index of that route.\n   */\n  replaceAt(state, key, route, preserveIndex = false) {\n    const index = StateUtils.indexOf(state, key);\n    const nextIndex = preserveIndex ? state.index : index;\n    let nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n\n  /**\n   * Replace a route by a index.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at.\n   */\n  replaceAtIndex(state, index, route) {\n    invariant(\n      !!state.routes[index],\n      'invalid index %s for replacing route %s',\n      index,\n      route.key\n    );\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    const routes = state.routes.slice();\n    routes[index] = route;\n\n    return {\n      ...state,\n      index,\n      routes,\n    };\n  },\n\n  /**\n   * Resets all routes.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at if the param `index` isn't provided.\n   */\n  reset(state, routes, index) {\n    invariant(\n      routes.length && Array.isArray(routes),\n      'invalid routes to replace'\n    );\n\n    const nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      const compare = (route, ii) => routes[ii] === route;\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n\n    return {\n      ...state,\n      index: nextIndex,\n      routes,\n    };\n  },\n};\n\nexport default StateUtils;\n","let uniqueBaseId: string = `id-${Date.now()}`;\nlet uuidCount: number = 0;\n\nexport function _TESTING_ONLY_normalize_keys(): void {\n  uniqueBaseId = `id`;\n  uuidCount = 0;\n}\n\nexport function generateKey(): string {\n  return `${uniqueBaseId}-${uuidCount++}`;\n}\n","import invariant from '../utils/invariant';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport createConfigGetter from './createConfigGetter';\n\nimport * as NavigationActions from '../NavigationActions';\nimport * as SwitchActions from './SwitchActions';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport { createPathParser } from './pathUtils';\n\nconst defaultActionCreators = () => ({});\n\nexport default (routeConfigs, config = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const order = config.order || Object.keys(routeConfigs);\n\n  const getCustomActionCreators =\n    config.getCustomActionCreators || defaultActionCreators;\n\n  const initialRouteParams = config.initialRouteParams;\n  const initialRouteName = config.initialRouteName || order[0];\n  const backBehavior = config.backBehavior || 'none';\n  const resetOnBlur = config.hasOwnProperty('resetOnBlur')\n    ? config.resetOnBlur\n    : true;\n\n  const initialRouteIndex = order.indexOf(initialRouteName);\n  if (initialRouteIndex === -1) {\n    throw new Error(\n      `Invalid initialRouteName '${initialRouteName}'.` +\n        `Should be one of ${order.map(n => `\"${n}\"`).join(', ')}`\n    );\n  }\n\n  const childRouters = {};\n  order.forEach(routeName => {\n    childRouters[routeName] = null;\n    const screen = getScreenForRouteName(routeConfigs, routeName);\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n\n  function getParamsForRoute(routeName, params) {\n    let routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return { ...routeConfig.params, ...params };\n    } else {\n      return params;\n    }\n  }\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, config);\n\n  function resetChildRoute(routeName) {\n    let initialParams =\n      routeName === initialRouteName ? initialRouteParams : undefined;\n    // note(brentvatne): merging initialRouteParams *on top* of default params\n    // on the route seems incorrect but it's consistent with existing behavior\n    // in stackrouter\n    let params = getParamsForRoute(routeName, initialParams);\n    const childRouter = childRouters[routeName];\n    if (childRouter) {\n      const childAction = NavigationActions.init();\n      return {\n        ...childRouter.getStateForAction(childAction),\n        key: routeName,\n        routeName,\n        params,\n      };\n    }\n    return {\n      key: routeName,\n      routeName,\n      params,\n    };\n  }\n\n  function getNextState(action, prevState, possibleNextState) {\n    function updateNextStateHistory(nextState) {\n      if (backBehavior !== 'history') {\n        return nextState;\n      }\n      let nextRouteKeyHistory = prevState ? prevState.routeKeyHistory : [];\n      if (action.type === NavigationActions.NAVIGATE) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n        const keyToAdd = nextState.routes[nextState.index].key;\n        nextRouteKeyHistory = nextRouteKeyHistory.filter(k => k !== keyToAdd); // dedup\n        nextRouteKeyHistory.push(keyToAdd);\n      } else if (action.type === NavigationActions.BACK) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n        nextRouteKeyHistory.pop();\n      }\n      return {\n        ...nextState,\n        routeKeyHistory: nextRouteKeyHistory,\n      };\n    }\n\n    let nextState = possibleNextState;\n    if (\n      prevState &&\n      prevState.index !== possibleNextState.index &&\n      resetOnBlur\n    ) {\n      const prevRouteName = prevState.routes[prevState.index].routeName;\n      const nextRoutes = [...possibleNextState.routes];\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n      nextState = {\n        ...possibleNextState,\n        routes: nextRoutes,\n      };\n    }\n    return updateNextStateHistory(nextState);\n  }\n\n  function getInitialState() {\n    const routes = order.map(resetChildRoute);\n    const initialState = {\n      routes,\n      index: initialRouteIndex,\n      isTransitioning: false,\n    };\n    if (backBehavior === 'history') {\n      const initialKey = routes[initialRouteIndex].key;\n      initialState['routeKeyHistory'] = [initialKey];\n    }\n    return initialState;\n  }\n\n  return {\n    childRouters,\n\n    getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n\n    getStateForAction(action, inputState) {\n      let prevState = inputState ? { ...inputState } : inputState;\n      let state = inputState || getInitialState();\n      let activeChildIndex = state.index;\n\n      if (action.type === NavigationActions.INIT) {\n        // NOTE(brentvatne): this seems weird... why are we merging these\n        // params into child routes?\n        // ---------------------------------------------------------------\n        // Merge any params from the action into all the child routes\n        const { params } = action;\n        if (params) {\n          state.routes = state.routes.map(route => ({\n            ...route,\n            params: {\n              ...route.params,\n              ...params,\n              ...(route.routeName === initialRouteName\n                ? initialRouteParams\n                : null),\n            },\n          }));\n        }\n      }\n\n      if (\n        action.type === SwitchActions.JUMP_TO &&\n        (action.key == null || action.key === state.key)\n      ) {\n        const { params } = action;\n        const index = state.routes.findIndex(\n          route => route.routeName === action.routeName\n        );\n\n        if (index === -1) {\n          throw new Error(\n            `There is no route named '${\n              action.routeName\n            }' in the navigator with the key '${action.key}'.\\n` +\n              `Must be one of: ${state.routes\n                .map(route => `'${route.routeName}'`)\n                .join(',')}`\n          );\n        }\n\n        return getNextState(action, prevState, {\n          ...state,\n          routes: state.routes.map((route, i) =>\n            i === index\n              ? {\n                  ...route,\n                  params: {\n                    ...route.params,\n                    ...params,\n                  },\n                }\n              : route\n          ),\n          index,\n        });\n      }\n\n      // Let the current child handle it\n      const activeChildLastState = state.routes[state.index];\n      const activeChildRouter = childRouters[order[state.index]];\n      if (activeChildRouter) {\n        const activeChildState = activeChildRouter.getStateForAction(\n          action,\n          activeChildLastState\n        );\n        if (!activeChildState && inputState) {\n          return null;\n        }\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          const routes = [...state.routes];\n          routes[state.index] = activeChildState;\n          return getNextState(action, prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      // Handle tab changing. Do this after letting the current tab try to\n      // handle the action, to allow inner children to change first\n      const isBackEligible =\n        action.key == null || action.key === activeChildLastState.key;\n      if (action.type === NavigationActions.BACK) {\n        if (isBackEligible && backBehavior === 'initialRoute') {\n          activeChildIndex = initialRouteIndex;\n        } else if (isBackEligible && backBehavior === 'order') {\n          activeChildIndex = Math.max(0, activeChildIndex - 1);\n        }\n        // The history contains current route, so we can only go back\n        // if there is more than one item in the history\n        else if (\n          isBackEligible &&\n          backBehavior === 'history' &&\n          state.routeKeyHistory.length > 1\n        ) {\n          const routeKey =\n            state.routeKeyHistory[state.routeKeyHistory.length - 2];\n          activeChildIndex = order.indexOf(routeKey);\n        } else {\n          return state;\n        }\n      }\n\n      let didNavigate = false;\n      if (action.type === NavigationActions.NAVIGATE) {\n        didNavigate = !!order.find((childId, i) => {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n          return false;\n        });\n        if (didNavigate) {\n          const childState = state.routes[activeChildIndex];\n          const childRouter = childRouters[action.routeName];\n          let newChildState = childState;\n\n          if (action.action && childRouter) {\n            const childStateUpdate = childRouter.getStateForAction(\n              action.action,\n              childState\n            );\n            if (childStateUpdate) {\n              newChildState = childStateUpdate;\n            }\n          }\n\n          if (action.params) {\n            newChildState = {\n              ...newChildState,\n              params: {\n                ...(newChildState.params || {}),\n                ...action.params,\n              },\n            };\n          }\n\n          if (newChildState !== childState) {\n            const routes = [...state.routes];\n            routes[activeChildIndex] = newChildState;\n            const nextState = {\n              ...state,\n              routes,\n              index: activeChildIndex,\n            };\n            return getNextState(action, prevState, nextState);\n          } else if (\n            newChildState === childState &&\n            state.index === activeChildIndex &&\n            prevState\n          ) {\n            return null;\n          }\n        }\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find(route => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return getNextState(action, prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return getNextState(action, prevState, {\n          ...state,\n          index: activeChildIndex,\n        });\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return { ...state };\n      }\n\n      // Let other children handle it and switch to the first child that returns a new state\n      let index = state.index;\n      let routes = state.routes;\n      order.find((childId, i) => {\n        const childRouter = childRouters[childId];\n        if (i === index) {\n          return false;\n        }\n        let childState = routes[i];\n        if (childRouter) {\n          childState = childRouter.getStateForAction(action, childState);\n        }\n        if (!childState) {\n          index = i;\n          return true;\n        }\n        if (childState !== routes[i]) {\n          routes = [...routes];\n          routes[i] = childState;\n          index = i;\n          return true;\n        }\n        return false;\n      });\n\n      // Nested routers can be updated after switching children with actions such as SET_PARAMS\n      // and COMPLETE_TRANSITION.\n      if (action.preserveFocus) {\n        index = state.index;\n      }\n\n      if (index !== state.index || routes !== state.routes) {\n        return getNextState(action, prevState, {\n          ...state,\n          index,\n          routes,\n        });\n      }\n      return state;\n    },\n\n    getComponentForState(state) {\n      const routeName = state.routes[state.index].routeName;\n      invariant(\n        routeName,\n        `There is no route defined for index ${state.index}. Check that\n        that you passed in a navigation state with a valid tab/screen index.`\n      );\n      const childRouter = childRouters[routeName];\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      config.defaultNavigationOptions\n    ),\n  };\n};\n","import React from 'react';\nimport { Linking, Platform, BackHandler } from 'react-native';\nimport { NavigationActions, pathUtils, getNavigation, NavigationProvider } from '@react-navigation/core';\nimport invariant from './utils/invariant';\nimport docsUrl from './utils/docsUrl';\n\nconst { urlToPathAndParams } = pathUtils;\n\nfunction isStateful(props) {\n  return !props.navigation;\n}\n\nfunction validateProps(props) {\n  if (props.persistenceKey) {\n    console.warn('You passed persistenceKey prop to a navigator. ' + 'The persistenceKey prop was replaced by a more flexible persistence mechanism, ' + 'please see the navigation state persistence docs for more information. ' + 'Passing the persistenceKey prop is a no-op.');\n  }\n  if (isStateful(props)) {\n    return;\n  }\n  /* eslint-disable no-unused-vars */\n  const {\n    navigation,\n    screenProps,\n    persistNavigationState,\n    loadNavigationState,\n    ...containerProps\n  } = props;\n  /* eslint-enable no-unused-vars */\n\n  const keys = Object.keys(containerProps);\n\n  if (keys.length !== 0) {\n    throw new Error('This navigator has both navigation and container props, so it is ' + `unclear if it should own its own state. Remove props: \"${keys.join(', ')}\" ` + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');\n  }\n  invariant(persistNavigationState === undefined && loadNavigationState === undefined || typeof persistNavigationState === 'function' && typeof loadNavigationState === 'function', 'both persistNavigationState and loadNavigationState must either be undefined, or be functions');\n}\n\n// Track the number of stateful container instances. Warn if >0 and not using the\n// detached prop to explicitly acknowledge the behavior. We should deprecated implicit\n// stateful navigation containers in a future release and require a provider style pattern\n// instead in order to eliminate confusion entirely.\nlet _statefulContainerCount = 0;\nexport function _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n}\n\n// We keep a global flag to catch errors during the state persistence hydrating scenario.\n// The innermost navigator who catches the error will dispatch a new init action.\nlet _reactNavigationIsHydratingState = false;\n// Unfortunate to use global state here, but it seems necessesary for the time\n// being. There seems to be some problems with cascading componentDidCatch\n// handlers. Ideally the inner non-stateful navigator catches the error and\n// re-throws it, to be caught by the top-level stateful navigator.\n\n/**\n * Create an HOC that injects the navigation and manages the navigation state\n * in case it's not passed from above.\n * This allows to use e.g. the StackNavigator and TabNavigator as root-level\n * components.\n */\nexport default function createNavigationContainer(Component) {\n  class NavigationContainer extends React.Component {\n    subs = null;\n\n    static router = Component.router;\n    static navigationOptions = null;\n\n    static getDerivedStateFromProps(nextProps) {\n      validateProps(nextProps);\n      return null;\n    }\n\n    _actionEventSubscribers = new Set();\n\n    constructor(props) {\n      super(props);\n\n      validateProps(props);\n\n      this._initialAction = NavigationActions.init();\n\n      if (this._isStateful() && BackHandler && typeof BackHandler.addEventListener === 'function') {\n        this.subs = BackHandler.addEventListener('hardwareBackPress', () => {\n          if (!this._isMounted) {\n            this.subs && this.subs.remove();\n          } else {\n            // dispatch returns true if the action results in a state change,\n            // and false otherwise. This maps well to what BackHandler expects\n            // from a callback -- true if handled, false if not handled\n            return this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n\n      this.state = {\n        nav: this._isStateful() && !props.loadNavigationState ? Component.router.getStateForAction(this._initialAction) : null\n      };\n    }\n\n    _renderLoading() {\n      return this.props.renderLoadingExperimental ? this.props.renderLoadingExperimental() : null;\n    }\n\n    _isStateful() {\n      return isStateful(this.props);\n    }\n\n    _validateProps(props) {\n      if (this._isStateful()) {\n        return;\n      }\n\n      // eslint-disable-next-line no-unused-vars\n      const { navigation, screenProps, ...containerProps } = props;\n\n      const keys = Object.keys(containerProps);\n\n      if (keys.length !== 0) {\n        throw new Error('This navigator has both navigation and container props, so it is ' + `unclear if it should own its own state. Remove props: \"${keys.join(', ')}\" ` + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');\n      }\n    }\n\n    _handleOpenURL = ({ url }) => {\n      const { enableURLHandling, uriPrefix } = this.props;\n      if (enableURLHandling === false) {\n        return;\n      }\n      const parsedUrl = urlToPathAndParams(url, uriPrefix);\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const action = Component.router.getActionForPathAndParams(path, params);\n        if (action) {\n          this.dispatch(action);\n        }\n      }\n    };\n\n    _onNavigationStateChange(prevNav, nav, action) {\n      if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful() && !!process.env.REACT_NAV_LOGGING) {\n        if (console.group) {\n          console.group('Navigation Dispatch: ');\n          console.log('Action: ', action);\n          console.log('New State: ', nav);\n          console.log('Last State: ', prevNav);\n          console.groupEnd();\n        } else {\n          console.log('Navigation Dispatch: ', {\n            action,\n            newState: nav,\n            lastState: prevNav\n          });\n        }\n        return;\n      }\n\n      if (typeof this.props.onNavigationStateChange === 'function') {\n        this.props.onNavigationStateChange(prevNav, nav, action);\n      }\n    }\n\n    componentDidUpdate() {\n      // Clear cached _navState every tick\n      if (this._navState === this.state.nav) {\n        this._navState = null;\n      }\n    }\n\n    async componentDidMount() {\n      this._isMounted = true;\n      if (!this._isStateful()) {\n        return;\n      }\n\n      if (__DEV__ && !this.props.detached) {\n        if (_statefulContainerCount > 0) {\n          // Temporarily only show this on iOS due to this issue:\n          // https://github.com/react-navigation/react-navigation/issues/4196#issuecomment-390827829\n          if (Platform.OS === 'ios') {\n            console.warn(`You should only render one navigator explicitly in your app, and other navigators should be rendered by including them in that navigator. Full details at: ${docsUrl('common-mistakes.html#explicitly-rendering-more-than-one-navigator')}`);\n          }\n        }\n      }\n      _statefulContainerCount++;\n      Linking.addEventListener('url', this._handleOpenURL);\n\n      // Pull out anything that can impact state\n      let parsedUrl = null;\n      let userProvidedStartupState = null;\n      if (this.props.enableURLHandling !== false) {\n        ({\n          parsedUrl,\n          userProvidedStartupState\n        } = await this.getStartupParams());\n      }\n\n      // Initialize state. This must be done *after* any async code\n      // so we don't end up with a different value for this.state.nav\n      // due to changes while async function was resolving\n      let action = this._initialAction;\n      let startupState = this.state.nav;\n      if (!startupState && !userProvidedStartupState) {\n        !!process.env.REACT_NAV_LOGGING && console.log('Init new Navigation State');\n        startupState = Component.router.getStateForAction(action);\n      }\n\n      // Pull user-provided persisted state\n      if (userProvidedStartupState) {\n        startupState = userProvidedStartupState;\n        _reactNavigationIsHydratingState = true;\n      }\n\n      // Pull state out of URL\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const urlAction = Component.router.getActionForPathAndParams(path, params);\n        if (urlAction) {\n          !!process.env.REACT_NAV_LOGGING && console.log('Applying Navigation Action for Initial URL:', parsedUrl);\n          action = urlAction;\n          startupState = Component.router.getStateForAction(urlAction, startupState);\n        }\n      }\n\n      const dispatchActions = () => this._actionEventSubscribers.forEach(subscriber => subscriber({\n        type: 'action',\n        action,\n        state: this.state.nav,\n        lastState: null\n      }));\n\n      if (startupState === this.state.nav) {\n        dispatchActions();\n        return;\n      }\n\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({ nav: startupState }, () => {\n        _reactNavigationIsHydratingState = false;\n        dispatchActions();\n      });\n    }\n\n    async getStartupParams() {\n      const { uriPrefix, loadNavigationState } = this.props;\n      let url, loadedNavState;\n      try {\n        [url, loadedNavState] = await Promise.all([Linking.getInitialURL(), loadNavigationState && loadNavigationState()]);\n      } catch (err) {\n        // ignore\n      }\n      return {\n        parsedUrl: url && urlToPathAndParams(url, uriPrefix),\n        userProvidedStartupState: loadedNavState\n      };\n    }\n\n    componentDidCatch(e) {\n      if (_reactNavigationIsHydratingState) {\n        _reactNavigationIsHydratingState = false;\n        console.warn('Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state...');\n        this.dispatch(NavigationActions.init());\n      } else {\n        throw e;\n      }\n    }\n\n    _persistNavigationState = async nav => {\n      const { persistNavigationState } = this.props;\n      if (persistNavigationState) {\n        try {\n          await persistNavigationState(nav);\n        } catch (err) {\n          console.warn('Uncaught exception while calling persistNavigationState()! You should handle exceptions thrown from persistNavigationState(), ignoring them may result in undefined behavior.');\n        }\n      }\n    };\n\n    componentWillUnmount() {\n      this._isMounted = false;\n      Linking.removeEventListener('url', this._handleOpenURL);\n      this.subs && this.subs.remove();\n\n      if (this._isStateful()) {\n        _statefulContainerCount--;\n      }\n    }\n\n    // Per-tick temporary storage for state.nav\n\n    dispatch = action => {\n      if (this.props.navigation) {\n        return this.props.navigation.dispatch(action);\n      }\n\n      // navState will have the most up-to-date value, because setState sometimes behaves asyncronously\n      this._navState = this._navState || this.state.nav;\n      const lastNavState = this._navState;\n      invariant(lastNavState, 'should be set in constructor if stateful');\n      const reducedState = Component.router.getStateForAction(action, lastNavState);\n      const navState = reducedState === null ? lastNavState : reducedState;\n\n      const dispatchActionEvents = () => {\n        this._actionEventSubscribers.forEach(subscriber => subscriber({\n          type: 'action',\n          action,\n          state: navState,\n          lastState: lastNavState\n        }));\n      };\n\n      if (reducedState === null) {\n        // The router will return null when action has been handled and the state hasn't changed.\n        // dispatch returns true when something has been handled.\n        dispatchActionEvents();\n        return true;\n      }\n\n      if (navState !== lastNavState) {\n        // Cache updates to state.nav during the tick to ensure that subsequent calls will not discard this change\n        this._navState = navState;\n        this.setState({ nav: navState }, () => {\n          this._onNavigationStateChange(lastNavState, navState, action);\n          dispatchActionEvents();\n          this._persistNavigationState(navState);\n        });\n        return true;\n      }\n\n      dispatchActionEvents();\n      return false;\n    };\n\n    _getScreenProps = () => this.props.screenProps;\n\n    render() {\n      let navigation = this.props.navigation;\n      if (this._isStateful()) {\n        const navState = this.state.nav;\n        if (!navState) {\n          return this._renderLoading();\n        }\n        if (!this._navigation || this._navigation.state !== navState) {\n          this._navigation = getNavigation(Component.router, navState, this.dispatch, this._actionEventSubscribers, this._getScreenProps, () => this._navigation);\n        }\n        navigation = this._navigation;\n      }\n      invariant(navigation, 'failed to get navigation');\n      return <NavigationProvider value={navigation}>\n          <Component {...this.props} navigation={navigation} />\n        </NavigationProvider>;\n    }\n  }\n\n  return NavigationContainer;\n}","import React from 'react';\nimport withNavigation from './withNavigation';\n\nconst EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur',\n};\n\nconst EventNames = Object.keys(EventNameToPropName);\n\nclass NavigationEvents extends React.Component {\n  getPropListener = eventName => this.props[EventNameToPropName[eventName]];\n\n  componentDidMount() {\n    this.subscriptions = {};\n\n    // We register all navigation listeners on mount to ensure listener stability across re-render\n    // A former implementation was replacing (removing/adding) listeners on all update (if prop provided)\n    // but there were issues (see https://github.com/react-navigation/react-navigation/issues/5058)\n    EventNames.forEach(eventName => {\n      this.subscriptions[eventName] = this.props.navigation.addListener(\n        eventName,\n        (...args) => {\n          const propListener = this.getPropListener(eventName);\n          return propListener && propListener(...args);\n        }\n      );\n    });\n  }\n\n  componentWillUnmount() {\n    EventNames.forEach(eventName => {\n      this.subscriptions[eventName].remove();\n    });\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withNavigation(NavigationEvents);\n","import React from 'react';\nimport hoistStatics from 'hoist-non-react-statics';\nimport invariant from '../utils/invariant';\nimport NavigationContext from './NavigationContext';\n\nexport default function withNavigation(\n  Component,\n  config = { forwardRef: true }\n) {\n  class ComponentWithNavigation extends React.Component {\n    static displayName = `withNavigation(${Component.displayName ||\n      Component.name})`;\n\n    render() {\n      const navigationProp = this.props.navigation;\n      return (\n        <NavigationContext.Consumer>\n          {navigationContext => {\n            const navigation = navigationProp || navigationContext;\n            invariant(\n              !!navigation,\n              'withNavigation can only be used on a view hierarchy of a navigator. The wrapped component is unable to get access to navigation from props or context.'\n            );\n            return (\n              <Component\n                {...this.props}\n                navigation={navigation}\n                ref={config.forwardRef ? this.props.onRef : undefined}\n              />\n            );\n          }}\n        </NavigationContext.Consumer>\n      );\n    }\n  }\n\n  return hoistStatics(ComponentWithNavigation, Component);\n}\n","// Action constants\nexport const BACK = 'Navigation/BACK';\nexport const INIT = 'Navigation/INIT';\nexport const NAVIGATE = 'Navigation/NAVIGATE';\nexport const SET_PARAMS = 'Navigation/SET_PARAMS';\n\n// Action creators\nexport const back = (payload = {}) => ({\n  type: BACK,\n  key: payload.key,\n  immediate: payload.immediate,\n});\n\nexport const init = (payload = {}) => {\n  const action = {\n    type: INIT,\n  };\n  if (payload.params) {\n    action.params = payload.params;\n  }\n  return action;\n};\n\nexport const navigate = payload => {\n  const action = {\n    type: NAVIGATE,\n    routeName: payload.routeName,\n  };\n  if (payload.params) {\n    action.params = payload.params;\n  }\n  if (payload.action) {\n    action.action = payload.action;\n  }\n  if (payload.key) {\n    action.key = payload.key;\n  }\n  return action;\n};\n\nexport const setParams = payload => ({\n  type: SET_PARAMS,\n  key: payload.key,\n  params: payload.params,\n  preserveFocus: true,\n});\n","'use strict';\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar ReactIs = require('react-is');\nvar REACT_STATICS = {\n    childContextTypes: true,\n    contextType: true,\n    contextTypes: true,\n    defaultProps: true,\n    displayName: true,\n    getDefaultProps: true,\n    getDerivedStateFromError: true,\n    getDerivedStateFromProps: true,\n    mixins: true,\n    propTypes: true,\n    type: true\n};\n\nvar KNOWN_STATICS = {\n    name: true,\n    length: true,\n    prototype: true,\n    caller: true,\n    callee: true,\n    arguments: true,\n    arity: true\n};\n\nvar FORWARD_REF_STATICS = {\n    '$$typeof': true,\n    render: true,\n    defaultProps: true,\n    displayName: true,\n    propTypes: true\n};\n\nvar MEMO_STATICS = {\n    '$$typeof': true,\n    compare: true,\n    defaultProps: true,\n    displayName: true,\n    propTypes: true,\n    type: true\n};\n\nvar TYPE_STATICS = {};\nTYPE_STATICS[ReactIs.ForwardRef] = FORWARD_REF_STATICS;\n\nfunction getStatics(component) {\n    if (ReactIs.isMemo(component)) {\n        return MEMO_STATICS;\n    }\n    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\n\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n    if (typeof sourceComponent !== 'string') {\n        // don't hoist over string (html) components\n\n        if (objectPrototype) {\n            var inheritedComponent = getPrototypeOf(sourceComponent);\n            if (inheritedComponent && inheritedComponent !== objectPrototype) {\n                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n            }\n        }\n\n        var keys = getOwnPropertyNames(sourceComponent);\n\n        if (getOwnPropertySymbols) {\n            keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n        }\n\n        var targetStatics = getStatics(targetComponent);\n        var sourceStatics = getStatics(sourceComponent);\n\n        for (var i = 0; i < keys.length; ++i) {\n            var key = keys[i];\n            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n                try {\n                    // Avoid failures from read-only properties\n                    defineProperty(targetComponent, key, descriptor);\n                } catch (e) {}\n            }\n        }\n\n        return targetComponent;\n    }\n\n    return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n","export default function docsUrl(path) {\n  return `https://reactnavigation.org/docs/${path}`;\n}","import React from 'react';\n\n// TODO: change this to null on next major semver bump\nconst NavigationContext = React.createContext(undefined);\n\nexport default NavigationContext;\n","import * as NavigationActions from '../NavigationActions';\nimport invariant from '../utils/invariant';\n\nconst getNavigationActionCreators = route => {\n  return {\n    goBack: key => {\n      let actualizedKey = key;\n      if (key === undefined && route.key) {\n        invariant(typeof route.key === 'string', 'key should be a string');\n        actualizedKey = route.key;\n      }\n      return NavigationActions.back({ key: actualizedKey });\n    },\n    navigate: (navigateTo, params, action) => {\n      if (typeof navigateTo === 'string') {\n        return NavigationActions.navigate({\n          routeName: navigateTo,\n          params,\n          action,\n        });\n      }\n      invariant(\n        typeof navigateTo === 'object',\n        'Must navigateTo an object or a string'\n      );\n      invariant(\n        params == null,\n        'Params must not be provided to .navigate() when specifying an object'\n      );\n      invariant(\n        action == null,\n        'Child action must not be provided to .navigate() when specifying an object'\n      );\n      return NavigationActions.navigate(navigateTo);\n    },\n    setParams: params => {\n      invariant(\n        route.key && typeof route.key === 'string',\n        'setParams cannot be called by root navigator'\n      );\n      return NavigationActions.setParams({ params, key: route.key });\n    },\n  };\n};\n\nexport default getNavigationActionCreators;\n","import React from 'react';\nimport hoistStatics from 'hoist-non-react-statics';\nimport withNavigation from './withNavigation';\n\nexport default function withNavigationFocus(Component) {\n  class ComponentWithNavigationFocus extends React.Component {\n    static displayName = `withNavigationFocus(${Component.displayName ||\n      Component.name})`;\n\n    constructor(props) {\n      super(props);\n\n      this.subscriptions = [\n        props.navigation.addListener('didFocus', () =>\n          this.setState({ isFocused: true })\n        ),\n        props.navigation.addListener('willBlur', () =>\n          this.setState({ isFocused: false })\n        ),\n      ];\n\n      this.state = {\n        isFocused: props.navigation ? props.navigation.isFocused() : false,\n      };\n    }\n\n    componentWillUnmount() {\n      this.subscriptions.forEach(sub => sub.remove());\n    }\n\n    render() {\n      return (\n        <Component\n          {...this.props}\n          isFocused={this.state.isFocused}\n          ref={this.props.onRef}\n        />\n      );\n    }\n  }\n\n  return hoistStatics(\n    withNavigation(ComponentWithNavigationFocus, { forwardRef: false }),\n    Component\n  );\n}\n","import React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport { SceneView } from '@react-navigation/core';\n\nconst FAR_FAR_AWAY = 3000; // this should be big enough to move the whole view out of its container\n\nclass ResourceSavingSceneView extends React.PureComponent {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.isFocused && !prevState.awake) {\n      return { awake: true };\n    } else {\n      return null;\n    }\n  }\n\n  constructor(props) {\n    super();\n\n    this.state = {\n      awake: props.lazy ? props.isFocused : true\n    };\n  }\n\n  render() {\n    const { awake } = this.state;\n    const {\n      isFocused,\n      childNavigation,\n      removeClippedSubviews,\n      ...rest\n    } = this.props;\n\n    return <View style={styles.container} collapsable={false} removeClippedSubviews={Platform.OS === 'android' ? removeClippedSubviews : !isFocused && removeClippedSubviews}>\n        <View style={this._mustAlwaysBeVisible() || isFocused ? styles.innerAttached : styles.innerDetached}>\n          {awake ? <SceneView {...rest} navigation={childNavigation} /> : null}\n        </View>\n      </View>;\n  }\n\n  _mustAlwaysBeVisible = () => {\n    return this.props.animationEnabled || this.props.swipeEnabled;\n  };\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  innerAttached: {\n    flex: 1\n  },\n  innerDetached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});\n\nexport default ResourceSavingSceneView;","import React from 'react';\nimport invariant from '../utils/invariant';\n\nfunction createNavigator(NavigatorView, router, navigationConfig) {\n  class Navigator extends React.Component {\n    static router = router;\n    static navigationOptions = navigationConfig.navigationOptions;\n\n    state = {\n      descriptors: {},\n      screenProps: this.props.screenProps,\n    };\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n      const prevDescriptors = prevState.descriptors;\n      const { navigation, screenProps } = nextProps;\n      invariant(\n        navigation != null,\n        'The navigation prop is missing for this navigator. In react-navigation 3 you must set up your app container directly. More info: https://reactnavigation.org/docs/en/app-containers.html'\n      );\n      const { state } = navigation;\n      const { routes } = state;\n      if (typeof routes === 'undefined') {\n        throw new TypeError(\n          'No \"routes\" found in navigation state. Did you try to pass the navigation prop of a React component to a Navigator child? See https://reactnavigation.org/docs/en/custom-navigators.html#navigator-navigation-prop'\n        );\n      }\n\n      const descriptors = {};\n\n      routes.forEach(route => {\n        if (\n          prevDescriptors &&\n          prevDescriptors[route.key] &&\n          route === prevDescriptors[route.key].state &&\n          screenProps === prevState.screenProps\n        ) {\n          descriptors[route.key] = prevDescriptors[route.key];\n          return;\n        }\n        const getComponent = router.getComponentForRouteName.bind(\n          null,\n          route.routeName\n        );\n        const childNavigation = navigation.getChildNavigation(route.key);\n        const options = router.getScreenOptions(childNavigation, screenProps);\n        descriptors[route.key] = {\n          key: route.key,\n          getComponent,\n          options,\n          state: route,\n          navigation: childNavigation,\n        };\n      });\n\n      return { descriptors, screenProps };\n    }\n\n    render() {\n      return (\n        <NavigatorView\n          {...this.props}\n          screenProps={this.state.screenProps}\n          navigation={this.props.navigation}\n          navigationConfig={navigationConfig}\n          descriptors={this.state.descriptors}\n        />\n      );\n    }\n  }\n\n  return Navigator;\n}\n\nexport default createNavigator;\n","const deprecatedKeys = ['tabBar'];\n\n/**\n * Make sure screen options returned by the `getScreenOption`\n * are valid\n */\nexport default (screenOptions, route) => {\n  const keys = Object.keys(screenOptions);\n\n  const deprecatedKey = keys.find(key => deprecatedKeys.includes(key));\n\n  if (typeof screenOptions.title === 'function') {\n    throw new Error(\n      [\n        `\\`title\\` cannot be defined as a function in navigation options for \\`${\n          route.routeName\n        }\\` screen. \\n`,\n        'Try replacing the following:',\n        '{',\n        '    title: ({ state }) => state...',\n        '}',\n        '',\n        'with:',\n        '({ navigation }) => ({',\n        '    title: navigation.state...',\n        '})',\n      ].join('\\n')\n    );\n  }\n\n  if (deprecatedKey && typeof screenOptions[deprecatedKey] === 'function') {\n    throw new Error(\n      [\n        `\\`${deprecatedKey}\\` cannot be defined as a function in navigation options for \\`${\n          route.routeName\n        }\\` screen. \\n`,\n        'Try replacing the following:',\n        '{',\n        `    ${deprecatedKey}: ({ state }) => ({`,\n        '         key: state...',\n        '    })',\n        '}',\n        '',\n        'with:',\n        '({ navigation }) => ({',\n        `    ${deprecatedKey}Key: navigation.state...`,\n        '})',\n      ].join('\\n')\n    );\n  }\n\n  if (deprecatedKey && typeof screenOptions[deprecatedKey] === 'object') {\n    throw new Error(\n      [\n        `Invalid key \\`${deprecatedKey}\\` defined in navigation options for \\`${\n          route.routeName\n        }\\` screen.`,\n        '\\n',\n        'Try replacing the following navigation options:',\n        '{',\n        `    ${deprecatedKey}: {`,\n        ...Object.keys(screenOptions[deprecatedKey]).map(\n          key => `        ${key}: ...,`\n        ),\n        '    },',\n        '}',\n        '\\n',\n        'with:',\n        '{',\n        ...Object.keys(screenOptions[deprecatedKey]).map(\n          key =>\n            `    ${deprecatedKey + key[0].toUpperCase() + key.slice(1)}: ...,`\n        ),\n        '}',\n      ].join('\\n')\n    );\n  }\n};\n"],"mappings":";;;;;;AAAA;;;;;;ACGA;;;;;;ACAA;;;;;;ACCA;;;;;;ACJA;;;;;;ACIA;;;;;;ACJA;;;;;;;ACAA;;;;;;ACWA;;;;;;ACLA;;;;;;ACNA;;;;;;ACAA;;;;;;ACAA;;;;;;ACaA;;;;;;ACbA;;;;;;ACMA;;;;;;ACJA;;;;;;ACAA;;;;;;ACFA;;;;;;ACEA;;;;;;ACIA;;;;;;ACHA;;;;;;ACOA;;;;;;;;;;;;;;;ACVA;;;;;;ACSA;;;;;;ACHA;;;;;;ACHA;;;;;;ACEA;;;;;;ACJA;;;;;;ACKA;;;;;ACNA;;;;;;ACAA;;;;;;;;AC6CA;;;;;;ACzCA;;;;;;ACEA;;;;;;ACoEA;;;;;;;;;AC1EA","sourceRoot":""}