import _ from 'lodash';
import { types, flow } from 'mobx-state-tree';
import api from './api';
import { toJS } from 'mobx';

const OrgModel = types.model('Org', {
  id: types.string,
  name: types.string
});
const CoaModelLeaf = types.model('CoaLeaf', {
  id: types.union(types.number, types.string, types.undefined),
  name: types.string,
  count: types.union(types.number, types.string, types.undefined),
  debet: types.union(types.number, types.string, types.undefined),
  kredit: types.union(types.number, types.string, types.undefined)
});
const CoaModel = types.model('Coa', {
  id: types.union(types.number, types.string, types.undefined),
  name: types.string,
  count: types.union(types.number, types.string, types.undefined),
  debet: types.union(types.number, types.string, types.undefined),
  kredit: types.union(types.number, types.string, types.undefined),
  childs: types.map(CoaModelLeaf)
});
const TimeDataModel = types.model('TimeData', {
  year: types.integer,
  avgmth: types.integer
});
const StoreModel = types
  .model('Store', {
    org: types.string,
    orglist: types.array(OrgModel),
    list: types.map(CoaModel),
    cboh: types.integer,
    recv: types.integer,
    payb: types.integer,
    income: types.model('Income', {
      rev: TimeDataModel,
      exp: TimeDataModel
    })
  })
  .views(self => {
    const views = {
      find(id: string) {
        const find = (id: string, coa: any): any => {
          if (coa[id]) {
            return coa[id];
          }

          for (let i in coa) {
            let c = coa[i].childs;
            if (coa[i].debet === undefined) {
              coa[i].id = i;
              coa[i].debet = 0;
              coa[i].kredit = 0;
              coa[i].count = 0;
            }
            if (Object.keys(c).length > 0) {
              for (let ic in c) {
                c[ic].parent = coa[i];
              }
            }

            let f = find(id, c);
            if (f) {
              return f;
            }
          }
          return false;
        };
        const found = find(id, toJS(self.list));
        if (found) {
          return JSON.parse(
            JSON.stringify(found, function(key, value) {
              if (key === 'parent') return value.id;
              return value;
            })
          );
        }
        return false;
      },
      get cbohList() {
        return [views.find('30621')];
      }
    };
    return views;
  })
  .actions(self => ({
    reload: flow(function* reload() {
      const org: string = store.org ? `?org=${store.org}` : ``;
      self.list = (yield api.get('/get' + org)).body;
      self.orglist = (yield api.get('/org')).body;
      self.cboh = _.sumBy(self.cbohList, 'debet') || 0;
    }),
    setOrg(id: string) {
      self.org = id;
      store.reload();
    }
  }));

const store = StoreModel.create({
  org: '',
  orglist: [],
  list: {},
  cboh: 0,
  recv: 275000000,
  payb: 82500000,
  income: {
    rev: {
      year: 2950000000,
      avgmth: 38400000
    },
    exp: {
      year: 1684000000,
      avgmth: 24500000
    }
  }
});
export default store;
